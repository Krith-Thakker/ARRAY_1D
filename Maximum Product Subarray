#include <iostream>
#include <vector>
#include <climits>
using namespace std;

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if (nums.empty()) return 0;
        
        int n = nums.size();
        long long maximum_element = INT_MIN;
        long long product = 1;
        
        // Left to right scan
        for (int i = 0; i < n; ++i) {
            // Check for overflow before multiplication
            if (nums[i] != 0 && (LLONG_MAX / abs(product) < abs(nums[i]))) {
                // Overflow will occur, reset product
                product = 1;
            }
            product *= nums[i];
            maximum_element = max(maximum_element, product);
            
            // Reset product if it becomes zero
            if (product == 0) {
                product = 1;
            }
        }
        
        product = 1; // Reset product for right to left scan
        
        // Right to left scan
        for (int i = n - 1; i >= 0; --i) {
            // Check for overflow before multiplication
            if (nums[i] != 0 && (LLONG_MAX / abs(product) < abs(nums[i]))) {
                // Overflow will occur, reset product
                product = 1;
            }
            product *= nums[i];
            maximum_element = max(maximum_element, product);
            
            // Reset product if it becomes zero
            if (product == 0) {
                product = 1;
            }
        }
        
        return maximum_element;
    }
};
